#+PROPERTY: header-args :session writeup_figures :kernel julia-1.9 :pandoc yes :async yes

#+begin_src jupyter-julia
  using DrWatson
  using Revise
  @quickactivate "discrete_walk"

  using LinearAlgebra
  using Accessors
  using Statistics
  using LaTeXStrings
  Revise.includet(srcdir("WalkModel.jl"))
  using .WalkModel
  Revise.includet(srcdir("Utilities.jl"))
  using .Utilities
  using CairoMakie
  CairoMakie.activate!(type = "svg")
  set_theme!(fonts = (; regular = "/nix/store/dbn507rrsmgmdxwknhb3554nmkl0kvgi-gyre-fonts-2.005/share/fonts/truetype/texgyrepagella-regular.otf"))
#+end_src

#+RESULTS:
: [32m[1m  Activating[22m[39m project at `~/Documents/org/roam/data/c4/5097d2-2599-426d-82db-6ecfb5207151`


#+begin_src jupyter-julia
  (full_prototype, prototype, spectral_density) = let
      v = 1
      u = 2
      J = .01
      α = 0.5
      ω_c = 1
      N = 100
      p = ExtendedModelParameters(v, u, 0, OhmicSpectralDensity(ω_c, J, α), N, LinearBathDiscretization(), true, true, 0.)

      p, ModelParameters(p), OhmicSpectralDensity(p)
  end
  full_prototype.spectral_density
#+end_src

#+RESULTS:
: OhmicSpectralDensity(1, 0.01, 0.5)

* Exact Solution
#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 100
      @reset params.spectral_density.J = .1
      @reset params.spectral_density.α = .2

      @reset params.u = 2
      p = plot_overview(params, 600)
      savefig(plotsdir("overview_unshifted.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/62ab9d604f7ee690b03e1d63b5ce3ef3f291dff7.svg]]

* Strong Coupling Limit
Here we plot the spectrum and overlap with the \(\ket{A}\) site for
weak and strong coupling.

#+begin_src jupyter-julia
  let
      p = plot_A_overlap(prototype)
      plot!(title=L"$J=%$(full_prototype.spectral_density.J)$")
      savefig(plotsdir("spectrum_weak_couplign_limit.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/30cc2d6a363cd9103cab6cfbaab0f907978254c2.svg]]


#+begin_src jupyter-julia
  let
      params = @set full_prototype.spectral_density.J = 200
      p = plot_A_overlap(params)
      plot!(title=L"$J=%$(params.spectral_density.J)$")
      savefig(plotsdir("spectrum_stong_couplign_limit.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5873719a38c3a85dbcafa26b682da6b2d0a895f0.svg]]

#+begin_src jupyter-julia
  let
      params = auto_shift_bath(full_prototype, 0)
      p = plot_A_overlap(params)
      plot!(title=L"$J=%$(full_prototype.spectral_density.J)$")
      savefig(plotsdir("spectrum_weak_shifted.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cadee98f5aa2948d9c51cf28c180cb28b5b6f4f6.svg]]

* Bound Surface
#+begin_src jupyter-julia
  let
      αs = LinRange(0.001, .9, 200)
      ms = LinRange(.0, 1, 200)
      f, a, c = contourf(ms, αs, (m, α) -> minimal_N(1-m, α, .01, 1) |> log10,
                         levels=20,
                         axis=(xlabel=L"\langle m(u=\infty)\rangle", ylabel=L"\alpha"))

      Colorbar(f[1, 2], c, label=L"\log_{10}N",)
      save(plotsdir("N_formula_contour.pdf"), f)
  end
#+end_src

#+RESULTS:
: CairoMakie.Screen{PDF}
:

* Shift vs No-Shift
#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 100
      @reset params.spectral_density.J = .1
      @reset params.spectral_density.α = .2

      @reset params.u = 2

      e, g = discretize_bath(params)
      params = auto_shift_bath(params, 0)
      p = plot_overview(params, 600)
      savefig(plotsdir("overview_shifted.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/dbc7d2418ef3a421a5ddbe7b739278f2f9a53144.svg]]


#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 8
      @reset params.spectral_density.J = .1
      @reset params.spectral_density.α = 0.2
      #@reset params.discretization = ExponentialBathDiscretization

      @reset params.u = 2
      params = auto_shift_bath(params, 0)

      e, g = discretize_bath(params)

      p = plot_overview(params, 2π * 10)
      savefig(plotsdir("overview_shifted_few.tikz"))
      # plot!(t->exp(-2π * (params.spectral_density.α + 1) * abs2(v(0, params|>ModelParameters)) * params.spectral_density(params.ω_A) * t))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f49ef50f71abfd84b2692de4e94b6a1879cc9fc1.svg]]

#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 8
      @reset params.spectral_density.J = .1
      @reset params.spectral_density.α = 0.2
      @reset params.u = 2
      params = auto_shift_bath(params, 0)
      p = plot_overview_windowed(params, 2π * 100)

      sol = WalkSolution(π, params |> ModelParameters)
      plot!(t -> a_weight(t, sol) * 2π, label=L"$\rho_A(k=\pi)$", linestyle=:dash)
      #lens!([0, 2π*10], [0, 1], inset=(1, bbox(.45,.1, .5,.5)))
      savefig(plotsdir("overview_shifted_few_windowed.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/06cbbe8d62fdbba578e40eb0a354b69325312b54.svg]]


#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 8
      @reset params.spectral_density.J = 200
      @reset params.spectral_density.α = 0.2
      @reset params.u = 2
      #params = auto_shift_bath(params, 0)

      sol = WalkSolution(0, params |> ModelParameters)
      p = plot(t -> a_weight(t, sol) * 2π, 0, 2, label=L"$\rho_A(k=0,t)$", xlabel=L"$t$")
      plot!(t -> ρ_A_mean(t, sol) * 2π, 0.01, 2, label=L"$\rho_A(k=0)$ average")
      plot!(t -> ρ_A_mean(sol) * 2π, 0.01, 2, label=L"$\rho_A(k=0)$")
      #lens!([0, 2π*10], [0, 1], inset=(1, bbox(.45,.1, .5,.5)))
      savefig(plotsdir("strong_coupling_oscillations.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0b9aa049bc01ba24468c8d1d7939f7289f074cab.svg]]

* Phase Diagrams
#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 8
      @reset params.spectral_density.J = .01
      @reset params.spectral_density.α = 0
      #@reset params.discretization = ExponentialBathDiscretization

      @reset params.u = 2
      #params = auto_shift_bath(params, 0)
      #p = plot_overview_windowed(params, 2π * 10)

      par = ModelParameters(params)
      sol = WalkSolution(0, par)
      plot(t -> a_weight(t, sol) * 2π, 0.1, 10, label=L"$\rho_A(k=\pi)$", linestyle=:dash)
      plot!(t -> analytic_time_averaged_displacement(t, par))
      hline!([analytic_time_averaged_displacement(par)])
      # #lens!([0, 2π*10], [0, 1], inset=(1, bbox(.45,.1, .5,.5)))
      # savefig(plotsdir("overview_shifted_few_windowed.tikz"))
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d09eb8b3326ec9c005cd512bdf5344a961e5cffc.svg]]

#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 100
      @reset params.spectral_density.J = .01*5

      p = plot_phase_diagram(params, 8, window=true, shift_A=true)
      savefig(plotsdir("phase_diag_100.tikz"))
      p
  end
#+end_src

#+RESULTS:
:RESULTS:
: maximum(displacement) = 0.9993007523179109
[[file:./.ob-jupyter/6546ac44ed9d5830c2131f2bd85c57eafc86a90a.svg]]
:END:


#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 100
      @reset params.spectral_density.J = .05

      pgfplotsx()
      p = plot_phase_diagram(params, 8, window=false)
      savefig(plotsdir("phase_diag_100_nowindow.tikz"))
      p
  end
#+end_src

#+RESULTS:
:RESULTS:
: maximum(displacement) = 0.9597914082436544
[[file:./.ob-jupyter/365dae77cb914c16dfbca25d72fefc8eec56238e.svg]]
:END:


#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 100
      @reset params.spectral_density.J = .05


      p = plot_phase_diagram(params, 8, shift_A=false)
      savefig(plotsdir("phase_diag_100_nowindow_noshift.tikz"))
      p

  end
#+end_src

#+RESULTS:
: f326b905-6f62-472e-b71d-dde3030860da


#+begin_src jupyter-julia
  let
      params = @set full_prototype.N = 10
      @reset params.spectral_density.J = 10


      p = plot_phase_diagram(params, 10, shift_A=false)
      savefig(plotsdir("phase_diag_10_strong.tikz"))
      p
  end
#+end_src

#+RESULTS:
:RESULTS:
: maximum(displacement) = 0.529063957771869
[[file:./.ob-jupyter/fce650487a2d6347f9ec5377a67f73133db34fef.svg]]
:END:


#+begin_src jupyter-julia
    let
        us = LinRange(0, 4, 100)
        αs = [0.1, 2] |> sort
        pgfplotsx()
        params = @set full_prototype.spectral_density.J = .01*5
        @reset params.spectral_density.α = αs[1]
        @reset params.u = 0
        @reset params.N = 100

        p = plot(xlabel=L"$u$", ylabel=L"$\langle m \rangle$")
        param_fun = @parametrize_properties params spectral_density.α u
        function current_params(α, u)
            auto_shift_bath(param_fun(α, u), 0)
        end
        for α in αs
            τ = recurrence_time(current_params(α, 0))

            #plot!(us,  u -> analytic_time_averaged_displacement(current_params.(α, u) |> ModelParameters), label=L"$\alpha = %$α$")
            plot!(us,  u -> analytic_time_averaged_displacement(.5τ, .95τ, current_params.(α, u) |> ModelParameters), label=L"$\alpha = %$α$")
        end

        savefig(plotsdir("transition_u_graphs_wider.tikz"))
        p
    end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d3b6eaa74970271a25132636d8d2f61cffb0895f.svg]]


#+begin_src jupyter-julia
  let
      us = LinRange(0, 1, 3)
      αs = [0.1, 2] |> sort
      pgfplotsx()
      params = @set full_prototype.spectral_density.J = .01 * 3
      @reset params.spectral_density.α = αs[1]
      @reset params.u = 0
      @reset params.N = 100

      p = plot(xlabel=L"$u$", ylabel=L"$\langle m \rangle$")
      param_fun = @parametrize_properties params spectral_density.α u
      function current_params(α, u)
          auto_shift_bath(param_fun(α, u), 0).ω_A
      end

      for α in αs
          plot!(us,  u -> current_params(α, u), label=L"$\alpha = %$α$")
      end

      #savefig(plotsdir("transition_u_graphs_wider.tikz"))
      p
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/62c18bf05d1ea8194a1562b0ab1f37fd9ac37ad7.svg]]

* Worked Example
:PROPERTIES:
:ID:       f58f0685-c272-4a16-8659-ff7ceb82b6f0
:END:
Let us suss out the required number of modes.
#+begin_src jupyter-julia :results none
  α = .1
  m_target = .8
  g² = .01
#+end_src

The estimation formula gives
#+begin_src jupyter-julia
  N_min = minimal_N(1-m_target, α, g², 1)
#+end_src

#+RESULTS:
: 103.10394603150304

We can also play with the target \(\ev{m}\) to see what ballpark we're
in
#+begin_src jupyter-julia
  import Serialization as ser
  let
      fig = Figure(resolution=(1000, 300))
      ax = Axis(fig[1,1], xlabel=L"\langle m\rangle", ylabel=L"N", yscale=log10)
      for g in LinRange(.01, .05, 5)
          g = round(g, sigdigits=2)
          lines!(ax, LinRange(0, (.99), 1000), m -> minimal_N(1-m, α, g, 1), label=L"g_0^2=%$g")
      end
      axislegend(ax, position=:lt)
      save(plotsdir("example_N_limits.pdf"), fig)
      ser.serialize(plotsdir("example_N_limits.ser"), fig)
  end
#+end_src

#+RESULTS:


which also fullfills the lower bound
#+begin_src jupyter-julia
  1/g²
#+end_src

#+RESULTS:
: 100.0


We may then continue to plot
#+begin_src jupyter-julia
  function plot_slices(f, αs, u_max, N_u, g², N)
      us = LinRange(0, u_max, N_u)
      αs = αs |> sort

      params = @set full_prototype.spectral_density.J = g²
      @reset params.spectral_density.α = αs[1]
      @reset params.u = 0
      @reset params.N = N

      ax = Axis(f, xlabel=L"$u$", ylabel=L"$\langle m \rangle$", title=L"$g_0^2=%$(round(g², sigdigits=2))$, $N=%$N$")
      ylims!(ax, 0, 1)

      #p = plot()
      param_fun = @parametrize_properties params spectral_density.α u
      function current_params(α, u)
          auto_shift_bath(param_fun(α, u), 0)
      end
      for α in αs
          τ = recurrence_time(current_params(α, 0))


          scatterlines!(ax, us,  u -> analytic_time_averaged_displacement(.5τ, .95τ, current_params.(α, u) |> ModelParameters);
                        label=L"$\alpha = %$α$ with windowing", linestyle=:dash)

          scatterlines!(ax, us,  u -> analytic_time_averaged_displacement(current_params.(α, u) |> ModelParameters);
                        label=L"$\alpha = %$α$", linestyle=:dot)
      end
      hlines!(ax, [.8], color="gray", label=L"target $\langle m\rangle$")
      #axislegend(ax, position=:lt)
      ax
  end
  function plot_slices(αs, u_max, N_u, g², N)
      f = Figure()
      ax = plot_slices(f[1,1], αs, u_max, N_u, g², N)
      f, ax
  end
#+end_src

#+RESULTS:
: plot_slices (generic function with 2 methods)

#+begin_src jupyter-julia
  let
      f = Figure(resolution=(1000, 500))
      n_u = 10
      ax = nothing
      for i in 1:3
          for j in 1:3
              plot_slices(f[1,i], [α, 2], 4, n_u, g²*i, trunc(Int, N_min+1))
              ax = plot_slices(f[2,i], [α, 2], 4, n_u, g²*i, trunc(Int, N_min/2+1))
          end
      end
      Legend(f[1, 4], ax)
      #save(plotsdir("example_cuts.pdf"), f)
      f
  end

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f100dc2c4541f2126927e98aaeff95eb50e4fa64.svg]]





[[file:./.ob-jupyter/dd17b9f29b061d6b8656062892195f84d3968036.svg]]

#+begin_src jupyter-julia
  let
      params = @set full_prototype.spectral_density.J = .03
      @reset params.N = 100

      f = Figure(resolution=(400*.8, .618 * 400*.8), fontsize=10)
      f = plot_phase_diagram(params, 50; α_limits=(0, 2), u_limits=(0,4))
      save(plotsdir("example_full_diag.pdf"), f)
      f
  end
#+end_src

#+RESULTS:
:RESULTS:
: maximum(displacement) = 0.9991197105684881
[[file:./.ob-jupyter/e200fbb2eb5cabe11a78299ce1b1f870ea479d77.svg]]
:END:

* Short Summary
#+begin_src jupyter-julia
  g = .2
#+end_src

#+RESULTS:
: 0.2

#+begin_src jupyter-julia
  let
      params = @set full_prototype.spectral_density.J = g^2
      @reset params.spectral_density.α = .1
      @reset params.N = 50
      @reset params.u = 4
      @reset params.discretization = LinearBathDiscretization(integral_method=true)

      params = auto_shift_bath(params, 0)
      f = Figure(resolution=(400, .618 * 400), fontsize=10)
      a, a_long = [Axis(f, xlabel=L"$ω_c t$", ylabel=L"\langle m\rangle")
                   for f in [f[2,1], f[2, 2]]]
      τ_R = recurrence_time(params)

      reduced_params = ModelParameters(params)

      sol = WalkSolution(0, reduced_params)
      Label(f[1, 1:2], L"$u=%$(params.u)$, $\alpha=%$(params.spectral_density.α)$, $N=%$(params.N)$, $g_0/ω_c=%$g$", tellheight=true)
      l1 = lines!(a, 0..2τ_R, t -> mean_displacement(t, reduced_params),  label=L"$\langle m(t)\rangle$")
      l2 = lines!(a_long, 0..10τ_R, t -> mean_displacement(t, reduced_params),  label=L"$\langle m(t)\rangle$")
      Γ = decay_rate(params)
      l3 =lines!(a, 0..2τ_R, t -> 1-exp(-Γ * t),  label=L"$\langle \exp(-Γt)\rangle$", linestyle=:dash)
      l4 = vlines!(a, [τ_R], color="gray", linestyle=:dash, label=L"τ_R")
      f[3,1:2] = Legend(f, a, orientation=:horizontal, tellheight=true)
      linkyaxes!(a, a_long)
      hideydecorations!(a_long, grid=false)
      trim!(f.layout)
      save(plotsdir("mean_displacement_example.pdf"), f)
      f
  end
#+end_src

#+RESULTS:
: 4578ce0d-b70a-4772-b74a-ea9f9329af86

#+begin_src jupyter-julia
  let
      scale = 1
      f = Figure(resolution=(400 * scale, .618 * 400 * scale * 3), fontsize=10)
      for (i, N) in enumerate([5, 50, 100])
          params = @set full_prototype.spectral_density.J = g^2
          @reset params.spectral_density.α = .5
          @reset params.N = N
          @reset params.u = 4
          τ_R = recurrence_time(params)

          layout = f[i, 1] = GridLayout()
          a = Axis(layout[1,1], xlabel=L"$ω_c t$", ylabel=L"\langle m(t)\rangle")

          for (simple, integral) in Iterators.product([false, true], [false, true])
              @reset params.discretization = LinearBathDiscretization(simple_energies=simple, integral_method=integral)
              reduced_params = ModelParameters(params)
              reduced_params = auto_shift_bath(reduced_params, 0)
              l1 = lines!(a, 0..1.5τ_R, t -> mean_displacement(t, reduced_params),  label=L"$\langle m(t)\rangle$", linewidth=1, linestyle=integral ? :dash : :solid, color=simple ? Cycled(1) : Cycled(2))
          end

          Label(layout[1, 1, Top()], L"$u=%$(params.u)$, $\alpha=%$(params.spectral_density.α)$, $N=%$(params.N)$, $g_0/ω_c=%$g$", tellheight=true, padding=(10, 10, 10, 10))
      end
      save(plotsdir("mean_displacement_complicated_vs_simple_energy.pdf"), f)
      f
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/70307f03d557209f9c30675558b9cafee68a31bf.svg]]

#+begin_src jupyter-julia
  let
      params = @set full_prototype.spectral_density.J = g^2
      @reset params.N = 50
      @reset params.u = 4
      @reset params.discretization = LinearBathDiscretization(integral_method=false)
      scale = .8

      f = Figure(resolution=(400 * scale, .618 * 400 * scale * .8), fontsize=10)
      a = Axis(f[1,1], xlabel=L"$ω_c t$", ylabel=L"\langle m(t)\rangle")
      τ_R = recurrence_time(params)

      for α in [.1]
          @reset params.spectral_density.α = α
          params = auto_shift_bath(params, 0)

          reduced_params = ModelParameters(params)
          #sol = WalkSolution(0, reduced_params)

          lines!(a, 0..1.5τ_R, t -> mean_displacement(t, reduced_params),  label=L"α=%$α")
          #lines!(a, 0..2τ_R, t -> a_weight(t, sol),  label=L"α=%$α")
      end
      #Legend(f[1,2], a)


      times = [.5τ_R, 0.95τ_R]
      l4 = vlines!(a, times, color="gray", linestyle=:dash, label=L"τ_R")
      for (time, label) in zip(times, [L"τ_l=0.5 τ_R", L"τ_h=0.95 τ_R"])
          text!(a, (time + 15, .1), text=label, fontsize=10)
      end
      save(plotsdir("mean_displacement_example_simple.pdf"), f)
      f
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b7de3ad8abe003f36d765cf164adc869a9d33478.svg]]


#+begin_src jupyter-julia
  let
      params = @set full_prototype.spectral_density.J = g^2
      @reset params.N = 10
      res = 50

      α_small = .1
      α_large = 1.9
      u_limits = (0,4)
      τ_rec = recurrence_time(params)


      f = Figure(resolution=(400*1.3, .618 * 400*1.5), fontsize=10)

      grid_finite = f[1:2, 1] = GridLayout()
      axis_finite_cuts = Axis(grid_finite[1, 1], ylabel=L"\langle{m}\rangle", xlabel=L"u")
      grid_finite_heatmap = grid_finite[2, 1] = GridLayout()

      grid_continuum = f[1:2, 2] = GridLayout()
      axis_continuum_cuts = Axis(grid_continuum[1, 1], ylabel=L"\langle{m}\rangle", xlabel=L"u")
      grid_continuum_heatmap = grid_continuum[2, 1] = GridLayout()

      diag, ax_diag_fin, _ = plot_phase_diagram(grid_finite_heatmap, params, res; α_limits=(0, 2), u_limits=u_limits, colorbar=false)
      for (i, α) in enumerate([α_small, α_large])
          @reset params.spectral_density.α = α
          params = auto_shift_bath(params, 0)
          displacement_params = @parametrize_properties params u
          lines!(axis_finite_cuts, u_limits[1]..u_limits[2], u -> analytic_time_averaged_displacement(.5 * τ_rec, .95 * τ_rec, displacement_params(u) |> ModelParameters),
                 label=L"α=%$α", color=Cycled(i))
          hlines!(ax_diag_fin, [α], color=Cycled(i))
      end
      Label(grid_finite[1, 1, Top()], L"Numerically Exact, $N=%$(params.N)$", halign=:center, fontsize=10, valign=:bottom,
            padding = (0, 0, 5, 0))


      diag, ax_diag, hm = plot_phase_diagram(grid_continuum_heatmap, params, res; α_limits=(0, 2), u_limits=u_limits, continuum=true, colorbar=false)
      for (i, α) in enumerate([α_small, α_large])
          @reset params.spectral_density.α = α
          params = auto_shift_bath(params, 0)
          displacement_params = @parametrize_properties params u
          lines!(axis_continuum_cuts, u_limits[1]..u_limits[2], u -> analytic_time_averaged_displacement_continuum(displacement_params(u)),
                 label=L"α=%$α", color=Cycled(i))
          hlines!(ax_diag, [α], color=Cycled(i))
      end
      Label(grid_continuum[1, 1, Top()], L"Analytic, Weak Couping, $N=\infty$", halign = :center, fontsize=10,
            padding = (0, 0, 5, 0))

      linkaxes!(axis_finite_cuts, axis_continuum_cuts)
      linkaxes!(ax_diag_fin, ax_diag)

      linkxaxes!(ax_diag_fin, axis_finite_cuts)

      hideydecorations!(ax_diag)
      hideydecorations!(axis_continuum_cuts, grid=false)

      hidexdecorations!.([axis_finite_cuts, axis_continuum_cuts], grid=false)
      colorbar_layout = f[2, 3] = GridLayout()
      Colorbar(colorbar_layout[1, 1], hm, vertical=true, tellheight=true)
      Label(colorbar_layout[1, 1, Top()], text=L"\langle m\rangle", fontsize=10, padding=(0, 0, 6, 0))
      axislegend(axis_continuum_cuts, tellheight=true, tellwidth=true, orientation=:vertical, position=:rc, padding=(10,10,2,2), rowgap=-5)

      # Label(f[4, 1:2, Top()], text=L"$g_0/ω_c=%$g$", fontsize=11, padding=(0, 0, 5, 0), halign=:left)

      colgap!(f.layout, 10)

      for layout in [grid_finite, grid_continuum]
          rowsize!(layout, 1, Auto(1))
          rowsize!(layout, 2, Auto(2))
          rowgap!(layout, 10)
      end

      trim!(f.layout)
      #save(plotsdir("example_finite_vs_continuum.pdf"), f)
      f

  end
#+end_src

#+RESULTS:
:RESULTS:
: maximum(displacement) = 0.9678543112630135
: maximum(displacement) = 1.0000000000109444
[[file:./.ob-jupyter/b9194aa87b8741c6b48912a74490594bdd8de8c5.svg]]
:END:
