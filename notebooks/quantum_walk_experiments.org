#+PROPERTY: header-args :session finite_bath :kernel julia-1.8 :pandoc yes :async yes

#+begin_src jupyter-julia
  using DrWatson
  using Revise
  using Plots
  using LinearAlgebra
  @quickactivate "discrete_walk"

  Revise.includet(srcdir("WalkModel.jl"))
  using .WalkModel
  Revise.includet(srcdir("Utilities.jl"))
  using .Utilities
#+end_src

#+RESULTS:
: [32m[1m  Activating[22m[39m project at `~/Documents/org/roam/data/c4/5097d2-2599-426d-82db-6ecfb5207151`


* Sampling
#+begin_src jupyter-julia
  sd = OhmicSpectralDensity(1, 1, 2)
  plot(e-> (OhmicSpectralDensityIntegral(sd)(e)), 0, 10)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7f60d06fde6f16a58b425f66b44ac2026a6a5468.svg]]

#+begin_src jupyter-julia
    begin
        Îµ, g = exponential_energy_distribution(sd, 10)
        plot(e->sd(e), 0, 20, label="J")
        scatter!(Îµ, sd.(Îµ), label="J(Îµ)")
        scatter!(Îµ, g.^2, label="g")
        #Îµ[1] - Îµ[2]
    end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ebe7c6e0fde4a0ac19399281b4b5521cef106a1b.svg]]

#+begin_src jupyter-julia
  begin
      Îµ, g = linear_energy_distribution(sd, 100)
      plot(e->sd(e), 0, 11, label="J")
      scatter!(Îµ, sd.(Îµ), label="J(Îµ)")
      scatter!(Îµ, g.^2, label="g")
  end
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8a5cef558d2e8e984283813687a63076999d125a.svg]]

* General Solution
The behavior is overly sensitive on the coupling strength.
#+begin_src jupyter-julia
  N = 100
  p = plot(title=raw"$\rho_A(k=0,t)$")
  for Î± in [0,  .5, 1.5, 2, 3]
      vv = 1
      Ï‰ = 20 * vv
      Îµ, g = exponential_energy_distribution(OhmicSpectralDensity(1, 3*Ï‰/3, Î±), N)

      params = ModelParameters(v=vv, u=2, Ï‰=Ï‰, Îµ=Îµ, g=g)
      sol = solution(0, params)
      #@show mean_displacement(500, params)


      plot!(0:1:500, t->(a_weight(t, sol)), label="Î±=$(Î±)")
  end
  p
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a73ff806187b5c60b2ebdb64ed915efbacf7146c.svg]]

For small detuning it's completely bunged up.
#+begin_src jupyter-julia
  N = 100
  p = plot(title=raw"$\rho_A(k=0,t)$")
  for Î± in [0, 1.5]
      Îµ, g = exponential_energy_distribution(OhmicSpectralDensity(3, 2, Î±), N, 1e-4)
      params = ModelParameters(v=1, u=2, Ï‰=1, Îµ=Îµ, g=g)
      sol = solution(0, params)
      @show mean_displacement(200, params)
      plot!(t->(a_weight(t, sol)), 0, 50, label="Î±=$(Î±)")
  end
  p
#+end_src

#+RESULTS:
:RESULTS:
: mean_displacement(200, params) = 0.9597379957282997
: mean_displacement(200, params) = 0.9690446830404802
[[file:./.ob-jupyter/21e5abd3d6f73f64b7a29f67a09be6a0d81d85e7.svg]]
:END:


* With Schrieffer-Wolff
#+begin_src jupyter-julia
  vv = 1
  Î± = 2
  N = 1000
  k = 0
  sd = OhmicSpectralDensity(1vv, .01, Î±)
  Îµ, g = exponential_energy_distribution(sd, N, 1e-3/2)
  Îµ .-= .18
  params = ModelParameters(v=vv, u=0, Îµ=Îµ, g=g, sw_approximation=true)
  sol = solution(k, params)
  plot(t->(a_weight(t, sol)), ylim=(0, 1), 0, 2000)
  #hline!([1/(1+1.724*abs2(v(k,params))*sd.J*sd.Î”^(sd.Î±-1)/(sd.Î±-1))])
  #1/(Îµ[2]- Îµ[1])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/544fd781249331b49033cf21da05f3aa3b1f68db.svg]]

#+begin_src jupyter-python
  time_averaged_displacement((500, 510), params, 0)
#+end_src

#+RESULTS:
: 3da88130-e503-4d86-9b3b-c6070b176d8d


* Analytic Result for Weak Coupling
Here the analytic result from [cite:@Ricottone2020 p. 5 "(30)"]
\( \begin{aligned} \rho_{A}(k)= & \lim _{s \rightarrow 0} s
\tilde{\rho}_{A}(k, s)=\frac{1}{2 \pi} \frac{1}{1+i
\Sigma_{A}^{\prime}(k)}, \\ & \Sigma_{A}^{\prime}(k)=\lim _{s
\rightarrow 0} \frac{\tilde{\Sigma}_{A}(k, s)}{s} .\end{aligned} \)
is implemented numerically.

We find that if we shift the sampled energies so that the first energy
is very close to zero, the phase diagram pops out nicely.
#+begin_src jupyter-julia
  plot_analytic_phase_diagram(50, num_bath_modes=100000, Îµ_min=1e-5, bath_discretization=linear_energy_distribution)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3a50a39de5f1c304b38a0f837798c339016d2c53.svg]]

We can also look at more bath modes
#+begin_src jupyter-julia
  plot_analytic_phase_diagram(50, num_bath_modes=1000, Îµ_min=1e-3)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f860fc7d4a93a20c83f7b29f56627db5a8669da2.svg]]

Little changes, but the transition gets crisper.

With less modes, it becomes more noticeable that the killing of the
phase transition washes out. (no matter the fudge factor)
#+begin_src jupyter-julia
  plot_analytic_phase_diagram(50, num_bath_modes=30, Îµ_min=1e-2/2)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c04e20b3e4b62488b28eaf72bfb8cb1e4b9a8a60.svg]]
Doing the same with the linear distribution gives worse results.
#+begin_src jupyter-julia
  plot_analytic_phase_diagram(50, num_bath_modes=30, Îµ_min=1e-2/2, bath_discretization=linear_energy_distribution)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f20bfaeb41cd7adce636db947defeb150e188ac0.svg]]


If I change the "fudge factor", we can get very different results.
#+begin_src jupyter-julia
  begin
      p = []
      N = 8
      for Î´ in [0; 10 .^ (collect(LinRange(-5,-1, N-1)))]
          current_plot =  plot_analytic_phase_diagram(50, num_bath_modes=300, Îµ_min=Î´)
          current_plot[1][:title] = Î´
          push!(p, current_plot)
      end
      plot(p..., layout=(N,1), size=default(:size) .* (2, 2N))
  end
#+end_src

#+RESULTS:
: 97990142-5721-446a-ab2a-4f8ce8c0c6ac
